import java.util.ArrayList;
import javax.swing.*;

public class AI 
{
  private static ArrayList<Coordinate> visited = new ArrayList<Coordinate>();
  private static ArrayList<Coordinate> possibleHazards = new ArrayList<Coordinate>();
  private static ArrayList<Coordinate> hazards = new ArrayList<Coordinate>();
  private static Coordinate location;
  
  public static void setCoord(Coordinate x) 
  { 
    location = x.softCopy();
  }
  
  public static void addVisited(Coordinate q)
  {
    visited.add(q);
  }
  
  public static ArrayList<Coordinate> getVisited()
  {
    return visited;
  }
  
  public static ArrayList<Coordinate> getSituation(ArrayList<Coordinate> used)
  {
    ArrayList<Coordinate> currentSituation = new ArrayList<Coordinate>();
    for (int w = 0; w < used.size(); w++)
    {
      if (location.sameSpot(used.get(w)))
        currentSituation.add(used.get(w));
    } 
    return currentSituation;
  }
  
  public static void findMove(ArrayList<Coordinate> used)
  {
    ArrayList<Coordinate> moves = location.getSurroundings();
    ArrayList<Coordinate> here = getSituation(used);
    for(int m = 0; m < moves.size(); m++)
    {
      boolean breeze = false;
      boolean stench = false;
      boolean gold = false;
      int type = 0;
      for(int n = 0; n < here.size(); n++)
      {
        if (here.get(n).getType() == 4)
        {
          breeze = true;
          type = 2;
        }
        if (here.get(n).getType() == 6)
        {
          stench = true;
          type = 3;
        }
        if (here.get(n).getType() == 5)
        {
          gold = true;
          type = 5;
        }
      
        if (type ==5)
        {
          JOptionPane.showMessageDialog(null, "Congratulations!", "Success", JOptionPane.PLAIN_MESSAGE);
          break;
        }
      }   
      boolean explored = false;
      for (int o = 0; o < visited.size(); o++)
      {
        if (moves.get(m).sameSpot(visited.get(o)))
          explored = true;
      }
  
      if ((breeze || stench) && !explored)
      {
        boolean confirmation = false;
        for (int y = 0; y < possibleHazards.size(); y++)
        {
          if (moves.get(m).equals(possibleHazards.get(y)))
          {
            confirmation = true;
            possibleHazards.remove(y);
          }
        }
        if (confirmation)
        {
          Coordinate hazard = moves.get(m);
          hazard.setType(type);
          hazards.add(hazard);
        }
        else
        {
          Coordinate possibleHazard = moves.get(m);
          possibleHazards.add(possibleHazard);
          possibleHazard.setType(2);
          moves.set(m,possibleHazard);
        }
      }
      else if  ((breeze || stench) && explored)
      {
        moves.get(m).setType(1);
      }
      else if ((!breeze && ! stench) && !explored)
      {
        moves.get(m).setType(0);
      }
      else if ((!breeze && ! stench) && explored)
      {
        moves.get(m).setType(1);
      }
    }
    
    selectionSort(moves);
    System.out.println();
    for (int i = 0; i < moves.size(); i ++)
    {
      System.out.println("("+moves.get(i).getY()+ ","+ moves.get(i).getX()+") : "+ moves.get(i).getType());
    }
    for (int u = 0; u < hazards.size(); u ++)
    {
      System.out.println("Hazards :("+hazards.get(u).getY()+ ","+ hazards.get(u).getX()+") : "+ hazards.get(u).getType());
    }
    for (int h = 0; h < possibleHazards.size(); h++)
    {
       System.out.println("Possible Hazards : ("+possibleHazards.get(h).getY()+ ","+ possibleHazards.get(h).getX()+")");
    } 
    
    
  }

        
  
  
  /*
  public static void findMove(ArrayList<Coordinate> used)
  {
    int priority;
    ArrayList<Coordinate> currentSituation = getSituation(used); 
    
    for (int w = 0; w < currentSituation.size(); w++)
    {
       System.out.println("Current spot : ("+currentSituation.get(w).getY()+ ","+ currentSituation.get(w).getX()+") : "+ currentSituation.get(w).getType());
    } 
    
    for (int a = 0; a < visited.size(); a++)
    {
       System.out.println("Visited : ("+visited.get(a).getY()+ ","+ visited.get(a).getX()+") : "+ visited.get(a).getType());
    } 
    
    ArrayList<Coordinate> possibleMoves = location.getSurroundings();
    
     for (int b = 0; b < possibleMoves.size(); b++)
    {
       System.out.println("Possible moves : ("+possibleMoves.get(b).getY()+ ","+ possibleMoves.get(b).getX()+")");
    } 
    
     for (int h = 0; h < possibleHazards.size(); h++)
    {
       System.out.println("Hazards moves : ("+possibleHazards.get(h).getY()+ ","+ possibleHazards.get(h).getX()+")");
    } 
    
    
    for (int p = 0; p < currentSituation.size(); p++)
    {
    if (currentSituation.get(p).getType() == 4 || currentSituation.get(p).getType() == 6)
    {
      priority= 2;
      for (int i = 0; i < possibleMoves.size(); i ++)
      {
        boolean seen = false;
        for (int j = 0; j < visited.size(); j++)
        {
          if (visited.get(j).sameSpot(possibleMoves.get(i)))
            seen= true;       
        }
        if (seen)
          priority = 1;
        possibleMoves.get(i).setType(priority);
        if (priority == 2)
        {
          Coordinate clue = possibleMoves.get(i);
          clue.setType(currentSituation.get(p).getType()/2);
          possibleHazards.add(clue);
        }
      }
    }
    else
    {
      priority= 0;
      for (int i = 0; i < possibleMoves.size(); i ++)
      {
        boolean seen = false;
        for (int j = 0; j < visited.size(); j++)
        {
          if (visited.get(j).sameSpot(possibleMoves.get(i)))
            seen= true;      
        }
        if (seen)
          priority = 1;
        possibleMoves.get(i).setType(priority);
      }
    }
    }
    
    selectionSort(possibleMoves);
    System.out.println();
    for (int i = 0; i < possibleMoves.size(); i ++)
    {
      System.out.println("("+possibleMoves.get(i).getY()+ ","+ possibleMoves.get(i).getX()+") : "+ possibleMoves.get(i).getType());
    }
  }
*/
   
  public static <T extends Comparable<T> >
    void selectionSort(ArrayList<T> table)
  {
    for(int target = 0; target < table.size() - 1; target++)
    {
      int smallest = target;
      for(int k = target + 1; k < table.size(); k++)
      {
        int n = table.get(smallest).compareTo(table.get(k));
        if(n > 0)
          smallest = k;
      }
      if(smallest != target)
      {
        T temp = table.get(target);
        table.set(target, table.get(smallest));
        table.set(smallest, temp);
      }
    }
  }
}
