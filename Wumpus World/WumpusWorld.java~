import java.awt.Container;
import java.awt.*;
import java.awt.event.*;
import java.awt.geom.*;
import javax.swing.*;
import java.util.*;

/*Coded by: Walter Squires
 * Main Algorithm:
 * 1) Create a frame with contain a grid, and a panel of buttons, and a two-dimentional array equal to the 
 * -Each button corresponds to a direction
 * -The grid's size "can" be changed, but should be left at 9*9 so it fits nicely in the frame
 * -Place a blue rectangle at the center of the grid, this represents the player
 * -Place green rectangles at the center of any other location
 * --The max number of rectangles is columns * rows/ 2
 * --The number and location of the recatngles is random
 * --The green rectangles represent trees
 * -Place a black rectangle at the center of any location other than the player start
 * --This can overridde a tree
 * --The black rectangle represents the goal
 * -All things placed on the grid have a value stored in the array to represent its location: 1 is the player, 2 is a tree, 3 is the goal
 * 2)Wait for a button to be pressed 
 * -Check that the location to be moved to does not have a tree in it and that it is within the grid
 * --If these conditions are satisfied, move the player to the new location
 * 3)If the player is in the same location as the goal, display a message saying they win.
 * 
 */


public class WumpusWorld
{
  public static void main(String[] args)
  {
    int points = 1000;
    MyFrame frame = new MyFrame();
    frame.setTitle("Movement Tester");
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    frame.setResizable(false);
    frame.setVisible(true);
  }
  
}

class MyFrame extends JFrame
{
  private int [][] location;
  private ArrayList<Coordinate> used;
  private JPanel buttonPanel; 
  private JButton up, down, left, right, upLeft, upRight, middle, downLeft, downRight;
  private Grid map;
  private Controls directionals;
  
  public MyFrame()
  {
    int rows = 4;                              // Sets the number of rows on the grid
    int columns = 4;                           // Sets the number of columns on the grid
    Coordinate.updateGrid(rows, columns);      // Lets the Coordinate class know what the size of the grid is
    location = new int [rows][columns];        // Creates the array of the 
    used = new ArrayList();                    // Creates an array list to keep track of all used coordinates
    for (int y = 0; y < rows; y++)             // Fills the grid with zeros so that nothing will be drawn
    {
      for (int x = 0; x < columns; x++)
      {
        location[y][x] = 0;
      }
    }
    
    setSize(1000, 600);                         // Sets the size of the frame
    map = new Grid(rows, columns, location, used);
    directionals = new Controls();
    getContentPane().add(map, "Center");
    
    buttonPanel = new JPanel();
    buttonPanel.setLayout( new GridLayout(3,3,0,0));
    buttonPanel.setBackground(Color.blue);
    ActionListener listener = new Choice();
    
    upLeft = new JButton("UP-LEFT");
    buttonPanel.add(upLeft);
    
    up = new JButton("UP");
    up.addActionListener(listener);
    buttonPanel.add(up);
    
    upRight = new JButton("UP-RIGHT");
    buttonPanel.add(upRight);
    
    left = new JButton("LEFT");
    left.addActionListener(listener);
    buttonPanel.add(left); 
    
    middle = new JButton();
    buttonPanel.add(middle);
    
    right = new JButton("RIGHT");
    right.addActionListener(listener);
    buttonPanel.add(right);
    
    downLeft = new JButton("DOWN-LEFT");
    buttonPanel.add(downLeft);
    
    down = new JButton("DOWN");
    down.addActionListener(listener);
    buttonPanel.add(down);
    
    downRight = new JButton("DOWN-RIGHT");
    buttonPanel.add(downRight);
    
    getContentPane().add(buttonPanel, "East");
    
    
    
    
    
  }
  
  
  private class  Choice implements ActionListener
  {
    public void actionPerformed(ActionEvent event)
    {
      Object source = event.getSource();
      
      int index = 0;
      for (int i = 0; i <used.size();i++)
      {
        if (used.get(i).getType() == 1)
          index = i;
      }
      Coordinate player = used.get(index);
      
      if(source == up)
      {
        System.out.println("   ("+player.getY()+","+player.getX()+")");
        player.n();
        repaint();
        System.out.println("   ("+player.getY()+","+player.getX()+")");    
      }
      else if (source == down)
      {
        System.out.println("   ("+player.getY()+","+player.getX()+")");
        player.s();
        repaint();
        System.out.println("   ("+player.getY()+","+player.getX()+")");    
      }
      else if (source == left)
      {
        System.out.println("   ("+player.getY()+","+player.getX()+")");
        player.w();
        repaint();
        System.out.println("   ("+player.getY()+","+player.getX()+")");
      }
      else if (source ==  right)
      {
        System.out.println("   ("+player.getY()+","+player.getX()+")");
        player.e();
        repaint();
        System.out.println("   ("+player.getY()+","+player.getX()+")");
      }
    }
  }
}



class Grid extends JPanel
{
  private int rows;
  private int columns;
  private int h;
  private int v;
  private int [][]location;
  private ArrayList<Coordinate> used;
  
  public Grid(int r, int c, int [][]l, ArrayList<Coordinate> u)
  {
    location = l;
    rows = r;
    columns = c;     
    used = u;
    selectedPointMaker(rows-1, 0, used, location,1);                              // Creates the starting point
    double holes =  ((rows*columns)*.125);                                        // Sets the number of holes to 1/8 of the area of the grid
    double wumpus = ((rows*columns)*.0625);                                       // Sets the number of wumpus to 1/16 of the area of the grid
                 
    for (int x = 0; x < holes;)                                                   // Loop that generates holes
    {
      boolean done =randomPointMaker(rows,columns,used,location, 2);              // Creates holes
      if (done) 
        x++;
    }
     for (int y = 0; y < wumpus;)                                                 // Loop that generates wumpus
    {
      boolean done =randomPointMaker(rows,columns,used,location, 3);              // Creates wumpus
      if (done)
        y++;
    }
     for (int z = 0; z < 1;)                                                    // Loop that generates gold
    {
      boolean done =randomPointMaker(rows,columns,used,location, 5);            // Creates the gold
      if (done)
        z++;
    }
    addWarnings(used);                                                           // Creates the warning signs for generated hazards
  }
  
  public void addWarnings(ArrayList<Location> used)
  {
    for (int i = 0;used.size();i++)
    {
      Location temp = used.get(i);
      int type = temp.getType();
      generateWarnings(temp,type,used);
    }
  }
  
  public void generateWarnings(Location temp, int type, ArrayList<Location> used)
  {
    ArrayList<Location> buffer = temp.getSurroundings();
    for (int j = 0; j < buffer.size(); j++)
    {
      used.add(buffer.get(j).setType(type*2));
    }
  }
  
  public boolean selectedPointMaker(int x, int y, ArrayList<Coordinate> used, int [][]location,int type)
  {
      boolean flag = true;                           // Makes a variable to keep track of if the coordinate has been used
      Coordinate coord = new Coordinate(x,y,type);   // Creates a Coordinate that contains the given coordinates
      for (int w = 0; w < used.size(); w++)          // Loop that checks if the newly generated point is in use
      {
        if (coord.equals(used.get(w)))               // If the point has been already found, change the flag
          flag = false;
      }
      if (flag)                                      // If the point is not in the array/...
      {
        location[coord.getX()][coord.getY()] = type; // Mark the grid with location and...
        used.add(coord);                             // Add the point to array of used coordinates   
        return true;
      }
      else
        return false;
  }
  
  public boolean randomPointMaker(int rows,int columns, ArrayList<Coordinate> used, int [][]location,int type)
  {
      Random generator = new Random();               // Creates random number generator
      boolean flag = true;                           // Makes a variable to keep track of if the coordinate has been used
      ArrayList<Coordinate> safeZone = new ArrayList<Coordinate>();                // Creates an array of locations that cannot be used
      int index = 0;    
      for (int i = 0; i <used.size();i++)
      {
        if (used.get(i).getType() == 1)
          index = i; 
        safeZone.add(used.get(i));
      }
      Coordinate player = used.get(index);           // Finds the players spawn point
      ArrayList<Coordinate> surroundings = player.getSurroundings();  
      for (int i = 0; i <surroundings.size();i++)
      { 
        safeZone.add(surroundings.get(i));
      }
      
  
      for (int w = 0; w < safeZone.size(); w++)      // Loop that checks if the newly generated point is allowed to be used
      {
        System.out.println("   ("+safeZone.get(w).getY()+","+safeZone.get(w).getX()+")");
      }
      
      int a = generator.nextInt(rows);               // Generates the x coordinate
      int b = generator.nextInt(columns);            // Generates the y coordinate
      Coordinate coord = new Coordinate(a,b,type);   // Creates a Coordinate that contains the generated coordinates
      System.out.println("("+coord.getY()+","+coord.getX()+")  :"+type);
      for (int w = 0; w < safeZone.size(); w++)      // Loop that checks if the newly generated point is allowed to be used
      {
        if (coord.sameSpot(safeZone.get(w)))            // If the point has been already found, change the flag
          flag = false;
      }
      if (flag)                                      // If the point is not in the array/...
      {
        location[coord.getX()][coord.getY()] = type; // Mark the grid with location and...
        used.add(coord);                             // Add the point to the array of used coordinates
        return true;   
      }
      else
        return false;
  }
    
    
    
    public int getHorizontalPositon()
    {
      return h;
    }
    
    public int getVerticalPostion()
    {
      return v;
    }
    
    public int getRows()
    {
      return rows;
    }
    
    public int getColumns()
    {
      return columns;
    }
    
    public void moveHorizontal(int newLocation)
    {
      h += newLocation;
      repaint();
    }
    
    public void moveVertical(int newLocation)
    {
      v += newLocation;
      repaint();
    }
    
    public void paintComponent(Graphics g)
    {
      super.paintComponent(g);
      Graphics2D g2 = (Graphics2D)g;
      g2.setColor(Color.black);
      for (int i = 50; i < ((columns * 50) + 50);)              // Draws the grid
      {
        for (int k = 50; k < ((rows * 50) + 50);)               // The grid is made of squares
        {
          Rectangle r = new Rectangle(i, k, 50, 50);
          g2.draw(r);
          k += 50;
        }
        i += 50;
      }
      
      for (int u = 0; u < used.size(); u++)
      {
        Coordinate buffer = used.get(u);
        if (buffer.getType() == 1)
        {
          g2.setColor(Color.blue);
          h = buffer.getY() * 50;
          v = buffer.getX() * 50;
          Rectangle c = new Rectangle(h + 70,v + 70, 10, 10);
          g2.fill(c);
        }
        else if (buffer.getType() == 2)
        {
          g2.setColor(Color.black);
          h = buffer.getY() * 50;
          v = buffer.getX() * 50;
          Rectangle c = new Rectangle(h + 70,v + 70, 10, 10);
          g2.fill(c);
        }
        else if (buffer.getType() == 3)
        {
          g2.setColor(Color.red);
          h = buffer.getY() * 50;
          v = buffer.getX() * 50;
          Rectangle c = new Rectangle(h + 70,v + 70, 10, 10);
          g2.fill(c);
        }
        else if (buffer.getType() == 4)
        {
          g2.setColor(Color.yellow);
          h = buffer.getY() * 50;
          v = buffer.getX() * 50;
          Rectangle c = new Rectangle(h + 70,v + 70, 10, 10);
          g2.fill(c);
        }
        else if (buffer.getType() == 5)
        {
          g2.setColor(Color.yellow);
          h = buffer.getY() * 50;
          v = buffer.getX() * 50;
          Rectangle c = new Rectangle(h + 70,v + 70, 10, 10);
          g2.fill(c);
        }
        /*
      for (int y = 0; y < rows; y++)
      {
        for (int x = 0; x < columns; x++)
        {
          if (location[y][x] == 1)                                // Represent the player as a blue square
          {
            g2.setColor(Color.blue);
            h = x * 50;
            v = y * 50;
            Rectangle c = new Rectangle(h + 70,v + 70, 10, 10);
            g2.fill(c);
          }  
          
          else if (location[y][x] == 2)                           // Represent the pits as black squares
          {
            g2.setColor(Color.black);
            int h2 = x * 50;
            int v2 = y * 50;
            Rectangle t = new Rectangle(h2 + 70,v2 + 70, 10, 10);
            g2.fill(t);
          }
          else if (location[y][x] == 3)                           // Represent the Wumpus as a red square
          {
            g2.setColor(Color.red);
            int h3 = x * 50;
            int v3 = y * 50;
            Rectangle w = new Rectangle(h3 + 70,v3 + 70, 10, 10);
            g2.fill(w);                
          }
          else if (location[y][x] == 4)                           //Represent the gold as a yellow square
          {
            g2.setColor(Color.yellow);
            int h3 = x * 50;
            int v3 = y * 50;
            //g2.drawString("G",h3 +70, v3+70);                   //Experiment with using letters
            Rectangle w = new Rectangle(h3 + 70,v3 + 70, 10, 10);
            g2.fill(w);               
          } 
        }
      */
    }
  }
}
